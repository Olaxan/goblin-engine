#version 430

struct point_light
{
	vec3 color;
	vec3 intensity;
	vec3 position;
};

in VS_OUT 
{
	vec3 Fragment;
	vec2 Uv;
	mat3 TBN;
} fs_in;

uniform vec4 u_camera_position;

uniform sampler2D u_base;
uniform sampler2D u_normal;

uniform point_light u_light;
uniform vec3 u_ambient_color;
uniform float u_ambient_strength;
uniform float u_specular_strength;
uniform int u_shininess;

out vec4 Color;

void main()
{
    	vec3 ambient = u_ambient_strength * u_ambient_color;

	vec3 normal = texture(u_normal, fs_in.Uv).rgb;
	normal = normal * 2.0 - 1.0;
	normal = normalize(fs_in.TBN * normal);

	vec3 light_dir = normalize(u_light.position - fs_in.Fragment);
	vec3 view_dir = normalize(u_camera_position.xyz - fs_in.Fragment);
	vec3 halfway_dir = normalize(light_dir + view_dir);
	
	float diff = max(dot(normal, light_dir), 0.0);
	vec3 diffuse = diff * u_light.color;
	
	float spec = pow(max(dot(normal, halfway_dir), 0.0), u_shininess);
	vec3 specular = u_specular_strength * spec * u_light.color;
	
	vec3 result = (ambient + diffuse + specular);
	
	Color = vec4(result, 1.0) * texture(u_base, fs_in.Uv);
}
