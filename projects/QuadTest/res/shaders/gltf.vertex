#version 430

layout(location = 0) in vec3 pos;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec2 uv;
layout(location = 3) in vec4 tangent;

out VS_OUT
{
	vec3 Fragment;
	vec2 Uv;
	mat3 TBN;
} vs_out;

uniform mat4 u_camera;
uniform mat4 u_model;

void main()
{
	gl_Position = u_camera * u_model * vec4(pos, 1);

	vec3 T = normalize(vec3(u_model * tangent));
	vec3 N = normalize(vec3(u_model * vec4(normal, 0.0)));
	vec3 B = cross(N, T) * tangent.z;

	vs_out.Fragment = (u_model * vec4(pos, 1)).xyz;
	vs_out.Uv = uv;
	vs_out.TBN = mat3(T, B, N);
}
